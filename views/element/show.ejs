<%
	var id = req.session.location.controller + "-" + req.session.location.action;


	var taskMultiselectOption = 
	_
	.keys(tasks)
	.map(function(groupName){
		return {
			label : groupName,
			children : 	tasks[groupName]
						.map(function(task){
							return {
								label: task.name, 
								value: task.id,
								selected: _.find(element.task, function(_task){ return _task.id == task.id }) ? true : false 
							}
						})
		};
	});

%>

<div class="container">
	<div id="<%= id %>">
		<h3>Fiche élément</h3>

		<hr/>

		<form class="form-inline" role="form" > 

			<input type="hidden" name="_csrf" value="<%= _csrf %>" />
			<fieldset class="row">
				<label class="col-sm-2">Identification</label>
				<div class="form-group col-sm-4">
					<div class="input-group col-sm-12">
						<label class="input-group-addon" for="serial" >N° de serie</label>
						<input class="form-control" type="text" disabled="disabled" id="serial" name="serial" value="<%= element.serial || '' %>">
					</div>
				</div>
			</fieldset>
			<fieldset class="row">
				<div class="form-group col-sm-offset-2 col-sm-4">
					<div class="input-group col-sm-12">
						<label class="input-group-addon" for="name" >Nom</label>
						<input class="form-control" type="text" disabled="disabled" id="name" name="element_name" value="<%= element.name || '' %>">
					</div>
				</div>
				<div class="form-group col-sm-4">
					<div class="input-group col-sm-12">
						<label class="input-group-addon" for="elementType" >Type</label>
						<input type="text" class="form-control" disabled="disabled" id="elementType" name="elementType" value="<%=element.type.name%>" />
					</div>
				</div>	
			</fieldset>
			
			<fieldset class="row">
				<div class="form-group col-sm-offset-2 col-sm-4">
					<div class="input-group col-sm-12">
						<label class="input-group-addon" for="owner" >Propriétaire</label>
						<input type="text" class="form-control" disabled="disabled" id="ownerName" name="ownerName" value="<%=element.owner.name%>" />
					</div>
				</div>
			</fieldset>
			
			<hr/>


			<fieldset class="row">
				<label class="col-sm-2">Tâches</label>
				<div class="form-group col-sm-4">
					<div class="input-group col-sm-12">
						<label class="input-group-addon" for="tasks" >Nom</label>
						<select multiple="multiple" id="tasks" name="tasks"></select>
					</div>
				</div>
			</fieldset>
			<fieldset id="newTasks"></fieldset>
			<fieldset class="row">
				<div class="form-group col-sm-offset-2 col-sm-4">
					<div class="input-group col-sm-12">
						<button class="btn btn-default add-task" >Ajouter&nbsp; tâche</button>
					</div>
				</div>
			</fieldset>

			<hr/>

			<fieldset class="row">
				<label class="col-sm-2">Wiki</label>
				<div class="form-group col-sm-8">
					<div class="input-group btn-group col-sm-12">
						<button class="btn btn-default addWiki" >
							<i class="fa fa-file-text-o"></i>&nbsp; Ajouter un wiki
						</button>
						<button class="btn btn-primary saveWiki hide" >
							Enregistrer les wikis
						</button>
					</div>
				</div>
			</fieldset>
			<% 
				var wikis = element.wiki;
				wikis.reverse().map(function(wiki){ %>
					<fieldset class="row">
						<div class="form-group col-sm-offset-2 col-sm-8">
							<div class="input-group col-sm-12">
								<label class="input-group-addon" for="wiki_<%= wiki.id %>" ><%= wiki.name %></label>
								<div class="form-control" id="wiki_<%= wiki.id %>" data-wiki-id="<%= wiki.id %>" name="wiki_<%= wiki.id %>"><%- wiki.description %></div>
							</div>
						</div>
						<label class="col-sm-2"><button class="btn btn-danger deleteWiki">Supprimer</button></label>
					</fieldset>
				<%})
			%>
	
			<hr/>	

			<fieldset class="row">
				<label class="col-sm-2"></label>
				<div class="form-group col-sm-3">
					<div class="input-group col-sm-12">
						<button type="submit" name="submit" class="btn btn-default">Enregistrer</button>
					</div>
				</div>
			</fieldset>
		</form>
	</div>
</div>


<script type="text/javascript">
	var  documentLoaded = function (){
		_.uniqueId('new_wiki_');
		window.element = JSON.parse(_("<%= JSON.stringify(element) %>").unescape());

		window.taskMultiselectOption = JSON.parse(_("<%= JSON.stringify(taskMultiselectOption) %>").unescape());

		$("#tasks").multiselect({
			buttonWidth: '100%', 
			includeSelectAllOption: true,
			allSelectedText: 'Toute les tâches',
			selectAllText : "Toute les tâches",
			nonSelectedText : "Aucune tâche"
		});
		
		$("#tasks").multiselect('dataprovider', taskMultiselectOption);

		$(".add-task").on("click", function(){
			$("#newTasks").append(JST["assets/templates/forms/task.ejs"]({
				id : _.uniqueId('new_task_'),
			}));
			BUREAU.tools.input.focus();
			return false;

		});


		$("form")
		.on("submit", function(event){
			try{
				
				BUREAU.tools.form.submitWaiter.start(event.target.submit);
				
				var data = {
					_csrf : event.target._csrf.value,
					task: 	($("#tasks").val() || [])
							.concat( 	$("[id^='new_task_']")
										.toArray()
										.map(function(task){
											return{
												name : $(task).find("[name='task_name']").val(),
												link : $(task).find("[name='typeLinked']").is(":checked")
											}
										})),
					wiki : 	[ $(	$("[id^=wiki_]")
								.toArray()
								.shift()
							)
							.attr("data-wiki-id")
						]
						.concat(	$("[id^=wiki_]")
									.toArray()
									.slice(1)
									.reverse()
									.map(function(wiki){
										return $(wiki).attr("data-wiki-id");
									}))
						.concat(	$("[id^='new_wiki_']")
									.toArray()
									.reverse()
									.map(function(wiki){
										var editor = CKEDITOR.instances[$(wiki).find("textarea").attr("name")];
										return {
											name : $(wiki).find("[name='name']").val(),
											description : editor.innerHTML,
											author : "<%= session.worker ? session.worker.id : ''  %>" || null
										}
									})
						)
				};

				console.log(data);

				BUREAU.tools.api({
					url : "/element/update/<%= element.id %>",
					type : "PUT",
					data : data,
				})
				.done(function(data){
					window.location.reload();
				})
				.fail(function(message){
					console.log("fails");
					BUREAU.tools.form.submitErrorHandler(message);
					BUREAU.tools.form.submitWaiter.stop(event.target.submit);
				});

				return false;
			}
			catch(e){
				console.error(e);
				console.error("ERROR");
				return false;
			}
		});

		$("button.addWiki").on("click", function(){
			$("button.saveWiki").removeClass("hide");
			$(this)
			.parent()
			.parent()
			.parent()
			.after(JST["assets/templates/forms/wiki.ejs"]({
				id : _.uniqueId('new_wiki_'),
				_csrf : "<%= _csrf %>"
			}));
			return false;
		});
		$("button.deleteWiki").on("click", function(){
			if(prompt("Ecris SUPPRIMER pour confirmer") == "SUPPRIMER"){
				$(this)
				.parent()
				.parent()
				.remove();
				$("button.saveWiki").removeClass("hide").addClass("fix");
			}
			return false;
		})
		$("button.saveWiki").on("click", function(){
			var wikis = $("[id^=wiki_]")
						.toArray()
						.reverse()
						.map(function(wiki){
							return $(wiki).attr("data-wiki-id");
						})
						.concat(	$("[id^='new_wiki_']")
									.toArray()
									.reverse()
									.map(function(wiki){
										var editor = CKEDITOR.instances[$(wiki).find("textarea").attr("name")];
										return {
											name : $(wiki).find("[name='name']").val(),
											description : editor.innerHTML,
											author : "<%= session.worker ? session.worker.id : ''  %>" || null
										}
									})
						);

			
			BUREAU.tools.api({
				url : "/element/update/<%= element.id %>",
				type : "PUT",
				data : {
					wiki : 	_.filter(wikis, function(wiki){ return wiki != undefined}),
					_csrf : "<%= _csrf %>"
				}
			})
			.done(function(data){
				window.location.href = window.location.href;
			});

			return false;
		});

		$("form").on("submit", function(){

			return false;

		});

	}
	window.addEventListener("load", documentLoaded);
<% if(false === res.locals.layout){ %>
	documentLoaded();
<% } %>

</script>

