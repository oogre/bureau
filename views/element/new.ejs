<%
	var id = req.session.location.controller + "-" + req.session.location.action;

	if("undefined" == typeof(element)){
		var element = {};
	}

	var taskMultiselectOption = 
	_
	.keys(tasks)
	.map(function(groupName){
		return {
			label : groupName,
			children : 	tasks[groupName]
						.map(function(task){
							return {
								label: task.name, 
								value: task.id
							}
						})
		};
	});
%>

<div class="container">
	<div id="<%= id %>">
		<h3>Créer un élément frigorifique</h3>

		<hr/>

		<form class="form-inline" role="form" > 

			<input type="hidden" name="_csrf" value="<%= _csrf %>" />
			<fieldset class="row">
				<label class="col-sm-2">Identification</label>
				<div class="form-group col-sm-4">
					<div class="input-group col-sm-12">
						<label class="input-group-addon" for="serial" >N° de serie</label>
						<input class="form-control" type="text" id="serial" name="serial" value="<%= element.serial || '' %>">
					</div>
				</div>
			</fieldset>
			<fieldset class="row">
				<div class="form-group col-sm-offset-2 col-sm-4">
					<div class="input-group col-sm-12">
						<label class="input-group-addon" for="name" >Nom</label>
						<input class="form-control" type="text" id="name" name="element_name" value="<%= element.name || '' %>">
					</div>
				</div>
				<div class="form-group col-sm-4">
					<div class="input-group col-sm-12">
						<label class="input-group-addon" for="elementType" >Type</label>
						<input type="text" class="form-control" data-toggle="dropdown" data-toggle-target=".dropdown-menu" aria-expanded="false" id="elementType" name="elementType" value=""/>
						<ul class="dropdown-menu" role="menu">
							<% elementTypes.map(function(elementType){%>
								<li><a href="#" data-type="<%= elementType.name %>"><%= elementType.name %></a></li>
							<%})%>
						</ul>
					</div>
				</div>	
			</fieldset>
			
			<fieldset class="row">
				<div class="form-group col-sm-offset-2 col-sm-4">
					<div class="input-group col-sm-12">
						<label class="input-group-addon" for="owner" >Propriétaire</label>
						<select class="form-control" id="owner" name="owner">
							<option disabled selected value="">magasins</option>
							<% shops.map(function(shop){%>
								<option value="<%= shop.id %>"><%= shop.brand +' - '+ shop.name %></option>
							<%})%>
						</select>
					</div>
				</div>
			</fieldset>
			
			<hr/>


			<fieldset class="row">
				<label class="col-sm-2">Tâches</label>
				<div class="form-group col-sm-4">
					<div class="input-group col-sm-12">
						<label class="input-group-addon" for="tasks" >Nom</label>
						<select multiple="multiple" id="tasks" name="tasks"></select>
					</div>
				</div>
			</fieldset>
			<fieldset id="newTasks"></fieldset>
			<fieldset class="row">
				<div class="form-group col-sm-offset-2 col-sm-4">
					<div class="input-group col-sm-12">
						<button class="btn btn-default add-task" >Ajouter&nbsp; tâche</button>
					</div>
				</div>
			</fieldset>

			<hr/>

			<fieldset id="wiki" class="row">
				<label class="col-sm-2">Wiki</label>
				<div class="form-group col-sm-8">
					<div class="input-group btn-group col-sm-12">
						<button class="btn btn-default add-wiki" >
							<i class="fa fa-file-text-o"></i>&nbsp; Ajouter un wiki
						</button>
					</div>
				</div>
			</fieldset>
	
			<hr/>	

			<fieldset class="row">
				<label class="col-sm-2"></label>
				<div class="form-group col-sm-3">
					<div class="input-group col-sm-12">
						<button type="submit" name="submit" class="btn btn-default">Enregistrer</button>
					</div>
				</div>
			</fieldset>

		</form>

	</div>
</div>




<script type="text/javascript">
	var  documentLoaded = function (){

		BUREAU.tools.input.focus();

		$("#tasks").multiselect({
			buttonWidth: '100%', 
			includeSelectAllOption: true,
			allSelectedText: 'Toute les tâches',
			selectAllText : "Toute les tâches",
			nonSelectedText : "Aucune tâche"
		});
		
		$("#tasks").multiselect('dataprovider', JSON.parse(_("<%= JSON.stringify(taskMultiselectOption) %>").unescape()));

		$(".add-task").on("click", function(){
			$("#newTasks").append(JST["assets/templates/forms/task.ejs"]({
				id : _.uniqueId('new_task_'),
			}));
			BUREAU.tools.input.focus();
			return false;

		});
		_.uniqueId('new_wiki_');
		$("button.add-wiki").on("click", function(){
			$(this)
			.parent()
			.parent()
			.parent()
			.after(JST["assets/templates/forms/wiki.ejs"]({
				id : _.uniqueId('new_wiki_'),
				_csrf : "<%= _csrf %>"
			}));
			return false;
		});

			<% if(shops.length == 1){%>
				$("[name='owner']")
				.attr("disabled", "disabled")
				.find("option")
				.first()
				.removeAttr("selected")
				.next()
				.attr("selected", "selected");
			<%} %>

			$("form")
			.on("submit", function(event){
				try{

					BUREAU.tools.form.submitWaiter.start(event.target.submit);
					
					var data = {
						_csrf : event.target._csrf.value,
						serial : (event.target.serial.value || "").trim(),
						name : (event.target.element_name.value || "").trim(),
						elementType : event.target.elementType.value.toLowerCase() || null,
						task: 	($("#tasks").val() || [])
								.concat( 	$("[id^='new_task_']")
											.toArray()
											.map(function(task){
												return{
													name : $(task).find("[name='task_name']").val(),
													link : $(task).find("[name='typeLinked']").is(":checked")
												}
											})),
						wiki : 	$("[id^='new_wiki_']")
								.toArray()
								.map(function(wiki){
									return {
										name : $(wiki).find("[name='name']").val().trim(),
										description : CKEDITOR.instances[$(wiki).find("textarea").attr("name")].innerHTML,
										author : "<%= session.worker ? session.worker.id : ''  %>" || null
									}
								}),
						owner : event.target.owner.value || null
					};

					console.log(data);

					if(!data.owner){
						delete data.owner;
					}
					BUREAU.tools.api({
						url : "/element/create/",
						type : "POST",
						data : data,
					})
					.done(function(data){
						console.log("done");
					})
					.fail(function(message){
						console.log("fails");
						BUREAU.tools.form.submitErrorHandler(message);
						BUREAU.tools.form.submitWaiter.stop(event.target.submit);
					});

					return false;
				}
				catch(e){
					console.error(e);
					console.error("ERROR");
					return false;
				}
			});

		$("[data-type]").on("click", function(){
			$("#elementType").val($(this).attr("data-type"));
		});

		$("#elementType").on("keyup", function(){
			var target = $(this).attr("data-toggle-target");
			var needle = $(this).val().toLowerCase();
			$(target).parent().addClass("open");
			if(needle){
				$(target).find("[data-type]:not([data-type*='"+needle+"'])").addClass("hide");
				$(target).find("[data-type*='"+needle+"']").removeClass("hide");
			}else{
				$(target).find("[data-type]").removeClass("hide");
			}
		});	

	};

	window.addEventListener("load", documentLoaded);
	<% if(false === res.locals.layout){ %>
		documentLoaded();
	<% } %>
</script>
