<%
	if("undefined" == typeof(work)){
		var work = {
			shop : {}
		};
	}
	if("undefined" == typeof(work.shop)){
		work.shop = {
			
		};
	}
	if("undefined" == typeof(shops)){
		shops = [];
	}
	
%>

<form class="form-inline" role="form" action="<%= action %>"> 

	<input type="hidden" name="_csrf" value="<%= _csrf %>" />
	<fieldset class="row">
		<label class="col-sm-2">Identification</label>
		<div class="form-group col-sm-5">
			<div class="input-group col-sm-12">
				<label class="input-group-addon" for="type" >Type</label>
				<select class="form-control" id="type" name="type" required pattern="[a-zA-Z]|\d">
					<option disabled selected value="" >Séléctionner un type de travail</option>
					<% workTypes.map(function(workType){ %>
						<option value="<%= workType.id %>" ><%= workType.name %></option>
					<% }) %>
				</select>
			</div>
		</div>
	</fieldset>

	<fieldset class="row">
		<div class="form-group col-sm-offset-2 col-sm-5">
			<div class="input-group col-sm-12">
				<label class="input-group-addon" for="shopName" >Magasin</label>
				<input type="hidden" class="form-control" name="shop" id="shop" value="" required pattern="[a-zA-Z]|\d"/>
				<ul id="shop-name-list" class="dropdown-menu" role="menu">
					<% shops.map(function(shop){%>
						<li data-id="<%= shop.id %>" rel="shopName" data-name="<%= shop.brand.toLowerCase() +" - "+ shop.name.toLowerCase() %>"><%= shop.brand +" - "+ shop.name %></li>
					<%})%>
				</ul>
				<input type="text" class="form-control" data-toggle="dropdown" data-toggle-target="#shop-name-list" aria-expanded="false" id="shopName" name="shopName" autocomplete="off" required/>
			</div>
		</div>
	</fieldset>

	<fieldset class="row">
		<div class="form-group col-sm-offset-2 col-sm-10">
			<div class="input-group col-sm-12">
				<label rel="elements" class="input-group-addon" >Element(s)</label>
				<ol id="elements"></ol>
			</div>
		</div>
	</fieldset>


	<div class="maintenance-hide">
		<hr/>
		<fieldset class="row ">
			<label class="col-sm-2">Horaires</label>
			<div class="form-group col-sm-5">
				<div class="input-group col-sm-12">
					<label class="input-group-addon" for="rendezvous">Rendez-vous</label>
					<input class="form-control" type="text" name="rendezvous" id="rendezvous" value=""  data-date-format="<%= config.appconfig.format.datetime %>" readonly autocomplete="off" required>
				</div>
			</div>
			<div class="form-group col-sm-5">
				<div class="input-group col-sm-12">
					<label class="input-group-addon" for="time">Duré du travail</label>
					<input class="form-control" type="number" name="time" id="time" value="0" autocomplete="off" required>
				</div>
			</div>
		</fieldset>
	</div>

	<div class="maintenance-show">
		<hr/>
		<fieldset class="row ">
			<label class="col-sm-2">Récurence</label>
			<div class="form-group col-sm-3">
				<div class="input-group col-sm-12">
					<label class="input-group-addon" for="interval">Intervale</label>
					<input class="form-control" type="number" name="interval" id="interval" value="0" autocomplete="off" required>
				</div>
			</div>
			<div class="form-group col-sm-3">
				<div class="input-group col-sm-12">
					<label class="input-group-addon" for="duration">Duré</label>
					<input class="form-control" type="number" name="duration" id="duration" value="0" autocomplete="off" required>
				</div>
			</div>
			<div class="form-group col-sm-4">
				<div class="input-group col-sm-12">
					<label class="input-group-addon" for="deadLine">Première Echéhance</label>
					<input class="form-control" type="text" name="deadLine" id="deadLine" value=""  data-date-format="<%= config.appconfig.format.date %>" readonly autocomplete="off" required>
				</div>
			</div>
		</fieldset>
	</div>
		
	<div class="maintenance-hide">
		<hr/>
		<fieldset class="row">
			<label class="col-sm-2">Homme(s)</label>
			<div class="form-group col-sm-5">
				<div class="input-group col-sm-12">
					<label class="input-group-addon" for="workers" >Nom</label>
					<select multiple="multiple" id="workers" name="workers">
						<% workers.map(function(worker){%>
							<option value="<%= worker.id %>" name="<%= worker.name.toLowerCase() %>" ><%= worker.name %></option>
						<%})%>
					</select>
				</div>
			</div>
		</fieldset>
	</div>

	<hr/>
	

	<fieldset id="wiki"></fieldset>
	
	<hr/>	

	<fieldset class="row">
		<label class="col-sm-2"></label>
		<div class="form-group col-sm-3">
			<div class="input-group col-sm-12">
				<button type="submit" name="submit" class="btn btn-default">Enregistrer</button>
			</div>
		</div>
	</fieldset>

</form>

<script type="text/javascript">
	BUREAU.tools.link();
	var config = JSON.parse(_("<%- JSON.stringify(config) %>").unescape());
	var work = JSON.parse(_("<%- JSON.stringify(work) %>").unescape());
	var shops = JSON.parse(_("<%- JSON.stringify(shops) %>").unescape());
	var workTypes = JSON.parse(_("<%- JSON.stringify(workTypes) %>").unescape());
	var routeTiming = 0;

	var maintenance = _.find(workTypes, function(workType){
		return workType.name == "maintenance"
	});

	$("#wiki").append(JST["assets/templates/forms/wiki.ejs"]({
		id : _.uniqueId('new_wiki_'),
		name : "instruction",
		_csrf : "<%= _csrf %>"
	}))

	$("[name='type']").on("change", function(){
		if($(this).val() == maintenance.id){
			$(".maintenance-show").removeClass("hide");
			$(".maintenance-hide").addClass("hide");
		}else{
			$(".maintenance-hide").removeClass("hide");
			$(".maintenance-show").addClass("hide");
		}
	});

	$('#deadLine').datetimepicker({
		icons: {
			time: "fa fa-clock-o",
			date: "fa fa-calendar",
			up: "fa fa-arrow-up",
			down: "fa fa-arrow-down"
		},
		language : "fr",
		pickTime : false,
		defaultDate : moment().add(1, 'days')
	});

	$("#rendezvous").datetimepicker({
		icons: {
			time: "fa fa-clock-o",
			date: "fa fa-calendar",
			up: "fa fa-arrow-up",
			down: "fa fa-arrow-down"
		},
		language : "fr",
		defaultDate : moment().add(1, 'days').hour("08").minute("00")
	});

	$("#workers").multiselect({
		buttonWidth: '100%', 
		includeSelectAllOption: true,
		allSelectedText: 'Tout le monde',
		selectAllText : "Tout le monde",
		nonSelectedText : "Aucun homme"
	});

	var buildElementStructure = function(parent, array){
		var $elements = $(parent);
		$elements.empty();
		array.map(function(element){
			$elements.append(JST["assets/templates/show/element.ejs"]({element : element}));
		});

		array.map(function(element){
			if(element.substructure){
				element.substructure.map(function(subElementId){
					subElementId = _.isObject(subElementId) ? subElementId.id : subElementId;
					$("#"+element.id+" > ol").append($("#"+subElementId).remove());
				})
			}
		});	
		return $elements.find("li");
	}

	var createTaskList = function($this, elementId, idRoot){
		BUREAU.tools.api({
			url : "/element/find/",
			data : {
				where : JSON.stringify({id : elementId})
			},
			type : "GET"
		})
		.done(function(data){
			if(data.length && data[0].task){
				$this.children("ol").before(JST["assets/templates/show/task.ejs"]({
					id : _.uniqueId(idRoot),
					element : data[0]
				}));
			}
		});
	}
	var destroyTaskList = function($this, idRoot){
		$this.children("[id^='"+idRoot+"']").remove();
	}

	var elementToggleSelection = function(event){
		event.stopPropagation();
		var $this = $(event.target).parent();
		var id = $this.attr("id");
		var idRoot = "task_list_";
		if($this.toggleClass("selected").hasClass("selected"))
			createTaskList($this, id, idRoot);
		else
			destroyTaskList($this, idRoot);
	}

	var elementIntroducing = function(shopId){
		BUREAU.tools.find.element({
			owner : shopId
		})
		.done(function(data){
			buildElementStructure("ol#elements", data)
			.find(".elementHead")
			.on("click", elementToggleSelection);
		});
	};

	$("[rel='shopName']").on("click", function(){
		var shopId = $(this).attr("data-id");
		var shopName = $(this).attr("data-name");
		$("#shopName").val(shopName);
		$("#shop").val(shopId);
		calculateDistance(_.find(shops, function(shop){ return shop.id == shopId }));
		elementIntroducing(shopId);
	});

	$("[data-toggle='dropdown']").on("keyup", function(){
		var target = $(this).attr("data-toggle-target");
		var needle = $(this).val().toLowerCase();
		$(target).parent().addClass("open");
		if(needle){
			$(target).find("[data-name]:not([data-name*='"+needle+"'])").addClass("hide");
			$(target).find("[data-name*='"+needle+"']").removeClass("hide");
		}else{
			$(target).find("[data-name]").removeClass("hide");
		}
	});


	BUREAU.tools.input.focus();

	$("form")
	.on("submit", function(event){
		$(event.target).find(".has-error").removeClass("has-error");

		BUREAU.tools.form.submitWaiter.start(event.target.submit);

		var editor = CKEDITOR.instances[$("#wiki").find("textarea").attr("name")];
		var data = {
			_csrf : event.target._csrf.value,
			type : (event.target.type.value || "").trim(),
			shop : (event.target.shop.value || "").trim(),
			element : 	$("ol#elements>li.selected, ol#elements ol>li.selected")
						.toArray()
						.map(function(element){
							return $(element).attr("id");
						}),
			rendezvous : moment(event.target.rendezvous.value, $(event.target.rendezvous).attr("data-date-format")).toISOString(),
			time : (event.target.time.value || "").trim(),
			interval : (event.target.interval.value || "").trim(),
			duration : (event.target.duration.value || "").trim(),
			deadLine : moment(event.target.deadLine.value, $(event.target.deadLine).attr("data-date-format")).toISOString(),
			worker : $('#workers').val(),
			wiki : {
				name : $("#wiki").find("[name='name']").val().trim(),
				description : editor.innerHTML,
				author : "<%= session.worker ? session.worker.id : ''  %>" || null
			},
			route : routeTiming,
			task : _.flatten(	$("ol#elements>li.selected, ol#elements ol>li.selected")
								.toArray()
								.map(function(element){
									var tasks =	$(element)
												.children("[id^='task_list_']")
												.find("select[name='task']")
												.val() || [];
									return	tasks
											.map(function(task){
												return {
													element :	$(element).attr("id"),
													task : task
												}
											})
								})
					),
		}

		if(!data.wiki.description){
			$("textarea").parent().addClass("has-error").get(0).scrollIntoView(true);;
			BUREAU.tools.form.submitWaiter.stop(event.target.submit);
			return false;
		}

		var ajaxStack = [];
		if(maintenance.id == data.type){
			var deadLine = moment(data.deadLine);
			var last = moment(data.deadLine).add(data.duration, "year");
			var onlyOne = data.duration == 0;
			delete data.time;
			delete data.duration;
			delete data.rendezvous;
			while(deadLine.isBefore(last) || onlyOne){
				data.deadLine = deadLine.toISOString();
				deadLine.add(data.interval, "month");
				ajaxStack.push(BUREAU.tools.api({
					url : event.target.action,
					type : "<%= method %>",
					data : data,
				}));
				if(onlyOne)break;
			}
		}
		else{	
			delete data.interval;
			delete data.duration;
			data.deadLine = data.rendezvous;
			ajaxStack.push(BUREAU.tools.api({
				url : event.target.action,
				type : "<%= method %>",
				data : data,
			}));
		}
		$.when.call($, ajaxStack)
		.done(function(data){
			setTimeout(function(){
				window.location = "/work"	
			}, 100);
			
		})
		.fail(function(message){
			BUREAU.tools.form.submitErrorHandler(message);
			BUREAU.tools.form.submitWaiter.stop(event.target.submit);
		});
		return false;
	});

	var calculateDistance = function(shop){
		origin      = new google.maps.LatLng(config.qg.location.lat,config.qg.location.lng);
		destination = new google.maps.LatLng(shop.location.lat,shop.location.lng);
		if(origin && destination){
			var request = {
				origin      : origin,
				destination : destination,
				travelMode  : google.maps.DirectionsTravelMode.DRIVING // Type de transport
			}
			var directionsService = new google.maps.DirectionsService(); // Service de calcul d'itinéraire
			directionsService.route(request, function(response, status){ // Envoie de la requête pour calculer le parcours
				if(status == google.maps.DirectionsStatus.OK){
					routeTiming = response.routes[0].legs[0].duration.value;
				}
			});
		}
	}

</script>



