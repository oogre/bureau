<% 
	if(typeof(show) == typeof(undefined)){
		var show = false;
	}

	if(typeof(create) == typeof(undefined)){
		var create = false;
	}


	var workerMultiselectOption = 	_
									.chain(workers)
									.groupBy( function(worker){ 
										return worker.team 
									})
									.values()
									.value()
									.map(function(team, id){
										return {
											label : "Equipe : " + id,
											children : 	team
														.map(function(worker){
															return {
																label: worker.firstname + " " + worker.lastname, 
																value: worker.id
															}
														})
										};
									});

	work.worker = work.worker || [];
	work.schedule = work.schedule || [];
%>

<fieldset class="row">
	<label class="col-sm-2">Hommes</label>
	<% if(!create){%>
		<div class="form-group col-sm-10">
			<div class="input-group col-sm-12">
				<table class="table" data-db-table-name="worker" >
					<thead>
						<tr>
							<th data-db-row-name="worker_id">
								Id
							</th>
							<th data-db-row-name="worker_name">
								Nom
							</th>
							<% if(!show){%>
								<th>
									Action
								</th>
							<% } %>
							<th>
								Travail
							</th>
						</tr>
					</thead>
					<tbody>
					<% 
						work.worker.map(function(worker){
					%>
						<tr data-db-row-name="worker_id" data-db-row-value="<%= worker.id %>">
							<td data-db-row-name="worker_id" data-db-row-value="<%= worker.id %>">
								<%= worker.id %>
							</td>
							<td data-db-row-name="worker_name" data-db-row-value="<%= worker.firstname %>">
								<%= worker.firstname + " " + worker.lastname%>
							</td>
							<% if(!show){%>
								<td><%
										var currentWorkerSchedule = _.find(work.schedule, function(schedule){
											return schedule.worker == worker.id && !schedule.stoped
										});
										if(currentWorkerSchedule){ %>
											<button class="btn btn-success schedule" data-worker-id="<%= worker.id %>" data-schedule-id="<%= currentWorkerSchedule.id %>">
												<span class="scheduleStop"><i class="fa fa-stop"></i>&nbsp; Stop</span>
												<span class="scheduleStart"><i class="fa fa-play"></i>&nbsp; Start</span>
											</button>
										<%}
										else{ %>
											<button class="btn btn-default schedule" data-worker-id="<%= worker.id %>" >
												<span class="scheduleStop"><i class="fa fa-stop"></i>&nbsp; Stop</span>
												<span class="scheduleStart"><i class="fa fa-play"></i>&nbsp; Start</span>
											</button>
										<%}%>
								</td>
							<%	} %>
							<td>
								<span class="schedule-worker" data-worker-id="<%= worker.id %>">00:00:00</span>
								<button class="btn btn-link schedule-details" data-worker-id="<%= worker.id %>">
									DÃ©tail
								</button>
							</td>
						</tr>
					<%	
						}); 
					%>

					<tr>
						<td></td>
						<td></td>
						<% if(!show){%>
							<td></td>
						<% } %>
						<td><span class="schedule-total">00:00:00</span></td>
					</tr>

					<% if(!show && workers.length > 0 && role>=99){%>
						<tr>
							<td>
								<div class="input-group col-sm-12">
									<label class="input-group-addon" for="workers" >Ajouter</label>
									<select multiple="multiple" id="workers" name="workers"></select>
								</div>
							</td>
							<td>
								<button class="btn btn-primary addWorkers hide">
									Ajouter
								</button>
							</td>
							<td>
							</td>
							</td>
							<td>
						</tr>
					<%}%>
					</tbody>
				</table>
			</div>
		</div>
	<%
	}
	else{ %>
		<div class="form-group col-sm-5">
			<div class="input-group col-sm-12">
				<label class="input-group-addon" for="workers" >Nom</label>
				<select multiple="multiple" id="workers" name="workers"></select>
			</div>
		</div>
	<%
	} %>
</fieldset>

<script type="text/javascript">
	<% if(!create){ %>
		
		window.realTime = new BUREAU.tools.realTime()
							.display(function(duration){
								$(".schedule-total")
								.text(
									_.pad(duration.hours(), 2, "0") + ":" +
									_.pad(duration.minutes(), 2, "0") + ":" +
									_.pad(duration.seconds(), 2, "0")
								);
							});

		window.workerRealTime = {};


		var saveStart = function(realtime){
			var schedule = _.find(work.schedule, function(schedule){ return !schedule.stoped && schedule.worker == realtime.data("worker")});
			if(!schedule){
				return BUREAU.tools.api({
					url : "/workSchedule/create",
					type : "POST",
					data : {
						worker : {
							id : realtime.data("worker")
						},
						work : {
							id : "<%= work.id %>"
						},
						started : moment().toISOString(),
						_csrf : "<%= _csrf %>"
					},
				}).done(function(data){
					work
					.schedule
					.push(data);
				});
			}else{
				return new $.Deferred().reject();
			}
		};
		var saveStop = function(realtime){
			var schedule = _.find(work.schedule, function(schedule){ return !schedule.stoped && schedule.worker == realtime.data("worker")});
			if(schedule){
				BUREAU.tools.api({
					url : "/workSchedule/update/"+schedule.id,
					type : "PUT",
					data : {
						stoped : moment().toISOString(),
						_csrf : "<%= _csrf %>"
					}
				}).done(function(data){
					work.schedule =	work
									.schedule
									.map(function(schedule){
										if(schedule.id === data.id){
											schedule.stoped = data.stoped;
										}
										return schedule;
									});
				});
			}
		};


		work
		.worker
		.map(function(worker){
			workerRealTime[worker.id] = new	BUREAU.tools.realTime()
											.data("worker", worker.id)
											.display(function(duration){
												$(".schedule-worker[data-worker-id='"+worker.id+"']")
												.text(
													_.pad(duration.hours(), 2, "0") + ":" +
													_.pad(duration.minutes(), 2, "0") + ":" +
													_.pad(duration.seconds(), 2, "0")
												);
											})
											.on("start", function(realtime){
												var _this = this;
												saveStart(realtime)
												.done(function(data){
													realtime.fire("saved", data);
												})
											})
											.addEvent("saved")
											.on("saved", function(realtime, data){
												$("button.schedule[data-worker-id='"+worker.id+"']")
												.attr('data-schedule-id', data.id);
											})
											.on("stop", function(realtime){
												saveStop(realtime)
											});
		});

		realTime.startAll = function(){
			work
			.worker
			.map(function(worker){
				workerRealTime[worker.id] &&
				workerRealTime[worker.id]
				.startTimer(false);
			});
			this.startTimer(false);
			$("button.schedule")
			.removeClass("btn-default")
			.addClass("btn-success");
		};

		realTime.stopAll = function(){
			work
			.worker
			.map(function(worker){
				workerRealTime[worker.id] &&
				workerRealTime[worker.id]
				.stopTimer();
			});
			this.stopTimer();
			$("button.schedule")
			.addClass("btn-default")
			.removeClass("btn-success");
		};

		work
		.schedule
		.map(function(schedule){
			var started = moment(new Date(schedule.started));
			var stoped = schedule.stoped ? moment(new Date(schedule.stoped)) : moment(new Date());
			var diff = stoped.diff(started, 'seconds');
																			
			workerRealTime[schedule.worker] && 
			workerRealTime[schedule.worker].inc(diff);

			realTime
			.inc(diff);

			if(!schedule.stoped){
				realTime
				.startTimer();
				
				workerRealTime[schedule.worker] &&
				workerRealTime[schedule.worker]
				.startTimer(false, true);
			}
		});

		$("button.addWorkers")
		.on("click", function(){
			BUREAU
			.tools
			.api({
				url : "/work/update/<%= work.id %>",
				type : "PUT",
				data : {
					worker : 	work
								.worker
								.map(function(worker){ 
									return worker.id 
								})
								.concat($("#workers").val()),
					_csrf : "<%= _csrf %>"
				}
			})
			.done(function(data){
				window.location.reload();
			});
			return false;
		});

		$("button.schedule-details")
		.on("click", function(){
			var _button = this;
			
			if($(_button).next("ul").length > 0){
				$(_button).next("ul").remove();
			}else{
				$(_button).after("<ul class='list-unstyled'></ul>"); 
				_.filter(work.schedule, function(schedule){
					return schedule.worker == $(_button).attr('data-worker-id')
				}).reverse().map(function(schedule){
					var started = moment(new Date(schedule.started));
					var stoped = schedule.stoped ? moment(new Date(schedule.stoped)) : moment(new Date());
					$(_button).next("ul").append(	"<li>"+started.format("LLL") + stoped.format(" > HH:mm") + "</li>");
				});
			}
			return false;
		});

		$("button.schedule").on("click", function(){
			var _button = this;
			var scheduleId = 	$(_button)
								.attr('data-schedule-id');

			if (typeof scheduleId !== typeof undefined && scheduleId !== false) {
				var workerId = 	$(_button)
								.removeAttr('data-schedule-id')
								.attr("data-worker-id");;
				realTime
				.stopTimer();

				
				workerRealTime[workerId] &&
				workerRealTime[workerId]
				.stopTimer();
			}
			else{
				var workerId = $(_button).attr("data-worker-id");

				realTime
				.startTimer();
			
				workerRealTime[workerId] &&
				workerRealTime[workerId]
				.startTimer(false);
			}
				
			$(_button)
			.toggleClass("btn-default")
			.toggleClass("btn-success");
			
			 return false;
		});

	<% } %>

	$("#workers")
	.multiselect({
		buttonWidth: '100%', 
		includeSelectAllOption: true,
		allSelectedText: 'Tout le monde',
		selectAllText : "Tout le monde",
		nonSelectedText : "Aucun Homme",
		onChange: function(option, checked, select) {
			if(checked){
				$(".addWorkers").removeClass("hide");
			}
			else{
				$(".addWorkers").addClass("hide");
			}
		}
	});
	$("#workers")
	.multiselect('dataprovider', JSON.parse(_("<%- JSON.stringify(workerMultiselectOption) %>").unescape()));
</script>